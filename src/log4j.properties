###
# 在代码中配置log4j环境的方式，我们已经见识过了，是不是感觉比较麻烦，我们试试使用配置文件的方式是否使您的应用程序更加的灵活。
# Log4j支持两种配置文件格式，一种是XML格式的文件，一种是Java特性的文件（键=值）。
# 下面我们先试试使用Java特性文件做为配置文件的方式
#
# 以下的设置参数，前文已经讲过是怎么回事的，这里就不再重复了
#
###

###
# 设置根记录器的配置，其语法为：log4j.rootLogger = [ level ] , appenderName1, appenderName2, …appenderNameN
# level用于设置日志记录的优先级，有系统自定义的8中类型，也可以自定义，官方建议只是用这四种 ERROR>WARN>INFO>DEBUG
# appenderNameN用于设置日志的输出地，可以设置多个，可以自定义名称
###
log4j.rootLogger = debug,stdout,D,E,F

###
# 设置日志记录的输出地，其语法为：
#     log4j.appender.appenderName = fully.qualified.name.of.appender.class
#　　 log4j.appender.appenderName.option1 = value1
#　　 …
#　　log4j.appender.appenderName.optionN = valueN
# fully.qualified.name.of.appender.class：指日志输出目的类的全路径类名，有好许多预定义，下面介绍四个常用的
# optionN/valueN ：分别是指对应的输出目的地属性和设置的属性值
#
# 如果对应的属性，仍然是对象级别的话，可以通过继续 . 的形式来设置对应的属性
#
###

###
# 输出信息到控制台，其可选的配置有如下几个：
# 1）Threshold：设置日志信息输出的级别
# 2）ImmediateFlush：设置日志信息是否被立即输出，默认为TRUE，立即输出
# 3）Target：设置日志信息输出的目标流，有两种值System.out和System.err ,默认值System.out(err为红色,out为黑色)
# 4）layout：设置日志信息输出的样式
# 5）Encoding：设置文件的编码格式，默认和系统平台的编码格式保持一致
###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Encoding = Utf-8
log4j.appender.stdout.Threshold = INFO
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n

###
# 输出信息到文件，其常用的可选的配置有如下几个：
# 1）Threshold：设置日志信息输出的级别
# 2）ImmediateFlush：设置日志信息是否被立即输出，默认为TRUE，立即输出
# 3）File：设置日志信息输出全路径，比如：E://logs/FileAppender.log
# 4）layout：设置日志信息输出的样式
# 5）Encoding：设置文件的编码格式，默认和系统平台的编码格式保持一致
# 6）Append：设置是否将日志消息追加到指定的文件中，默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
###
log4j.appender.D = org.apache.log4j.FileAppender
log4j.appender.D.File = logs/properties/FileAppender.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = ERROR
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n

###
# 输出信息到文件，但是这个文件是可控的，可以配置多久产生一个新的日志信息文件，其常用的可选的配置有如下几个：
# 1）Threshold：设置日志信息输出的级别
# 2）ImmediateFlush：设置日志信息是否被立即输出，默认为TRUE，立即输出
# 3）File：设置日志信息输出全路径，比如：E://logs/DailyRollingFileAppender.log
# 4）layout：设置日志信息输出的样式
# 5）Encoding：设置文件的编码格式，默认和系统平台的编码格式保持一致
# 6）Append：设置是否将日志消息追加到指定的文件中，默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
# 7）DatePattern：设置文件回滚的时间样式
#              '.'yyyy-MM 每月
#              '.'yyyy-ww 每周
#              '.'yyyy-MM-dd 每天
#              '.'yyyy-MM-dd-a 每天两次
#              '.'yyyy-MM-dd-HH 每小时
#              '.'yyyy-MM-dd-HH-mm 每分钟
###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File = logs/properties/DailyRollingFileAppender.log
log4j.appender.E.Append = true
log4j.appender.E.Threshold = WARN
log4j.appender.E.DatePattern = '.'yyyy-MM-dd-HH-mm
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n

###
# 输出信息到文件，但是这个文件是可控的，当文件的大小达到某个阈值的时候，日志文件会自动回滚，其常用的可选的配置有如下几个：
# 1）Threshold：设置日志信息输出的级别
# 2）ImmediateFlush：设置日志信息是否被立即输出，默认为TRUE，立即输出
# 3）File：设置日志信息输出全路径，比如：E://logs/RollingFileAppender.log
# 4）layout：设置日志信息输出的样式
# 5）Encoding：设置文件的编码格式，默认和系统平台的编码格式保持一致
# 6）Append：设置是否将日志消息追加到指定的文件中，默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
# 7）MaxFileSize：设置当文件达到此阈值的时候自动回滚，单位可以是KB，MB，GB，默认单位是KB
# 8）MaxBackupIndex：设置保存备份回滚日志的最大个数
###
log4j.appender.F = org.apache.log4j.RollingFileAppender
log4j.appender.F.File = logs/properties/RollingFileAppender.log
log4j.appender.F.Append = true
log4j.appender.F.Threshold = INFO
log4j.appender.F.MaxFileSize = 1
log4j.appender.F.MaxBackupIndex = 5
log4j.appender.F.layout = org.apache.log4j.PatternLayout
log4j.appender.F.layout.ConversionPattern = [%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n